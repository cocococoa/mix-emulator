use std::str::FromStr;

pub const CHAR_TABLE: [char; 56] = [
    ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'Δ', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
    'R', 'Σ', 'Π', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', '.', ',', '(', ')', '+', '-', '*', '/', '=', '$', '<', '>', '@', ';', ':', '\'',
];

#[derive(Debug)]
pub enum Instruction {
    NOP,
    ADD,
    SUB,
    MUL,
    DIV,
    NUM,
    CHAR,
    HLT,
    SLA,
    SRA,
    SLAX,
    SRAX,
    SLC,
    SRC,
    MOVE,
    LDA,
    LD1,
    LD2,
    LD3,
    LD4,
    LD5,
    LD6,
    LDX,
    LDAN,
    LD1N,
    LD2N,
    LD3N,
    LD4N,
    LD5N,
    LD6N,
    LDXN,
    STA,
    ST1,
    ST2,
    ST3,
    ST4,
    ST5,
    ST6,
    STX,
    STJ,
    STZ,
    JBUS,
    IOC,
    IN,
    OUT,
    JRED,
    JMP,
    JSJ,
    JOV,
    JNOV,
    JL,
    JE,
    JG,
    JGE,
    JNE,
    JLE,
    JAN,
    JAZ,
    JAP,
    JANN,
    JANZ,
    JANP,
    J1N,
    J1Z,
    J1P,
    J1NN,
    J1NZ,
    J1NP,
    J2N,
    J2Z,
    J2P,
    J2NN,
    J2NZ,
    J2NP,
    J3N,
    J3Z,
    J3P,
    J3NN,
    J3NZ,
    J3NP,
    J4N,
    J4Z,
    J4P,
    J4NN,
    J4NZ,
    J4NP,
    J5N,
    J5Z,
    J5P,
    J5NN,
    J5NZ,
    J5NP,
    J6N,
    J6Z,
    J6P,
    J6NN,
    J6NZ,
    J6NP,
    JXN,
    JXZ,
    JXP,
    JXNN,
    JXNZ,
    JXNP,
    INCA,
    DECA,
    ENTA,
    ENNA,
    INC1,
    DEC1,
    ENT1,
    ENN1,
    INC2,
    DEC2,
    ENT2,
    ENN2,
    INC3,
    DEC3,
    ENT3,
    ENN3,
    INC4,
    DEC4,
    ENT4,
    ENN4,
    INC5,
    DEC5,
    ENT5,
    ENN5,
    INC6,
    DEC6,
    ENT6,
    ENN6,
    INCX,
    DECX,
    ENTX,
    ENNX,
    CMPA,
    FCMP,
    CMP1,
    CMP2,
    CMP3,
    CMP4,
    CMP5,
    CMP6,
    CMPX,
}

impl FromStr for Instruction {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use Instruction::*;
        match s {
            "NOP" => Ok(NOP),
            "ADD" => Ok(ADD),
            "SUB" => Ok(SUB),
            "MUL" => Ok(MUL),
            "DIV" => Ok(DIV),
            "NUM" => Ok(NUM),
            "CHAR" => Ok(CHAR),
            "HLT" => Ok(HLT),
            "SLA" => Ok(SLA),
            "SRA" => Ok(SRA),
            "SLAX" => Ok(SLAX),
            "SRAX" => Ok(SRAX),
            "SLC" => Ok(SLC),
            "SRC" => Ok(SRC),
            "MOVE" => Ok(MOVE),
            "LDA" => Ok(LDA),
            "LD1" => Ok(LD1),
            "LD2" => Ok(LD2),
            "LD3" => Ok(LD3),
            "LD4" => Ok(LD4),
            "LD5" => Ok(LD5),
            "LD6" => Ok(LD6),
            "LDX" => Ok(LDX),
            "LDAN" => Ok(LDAN),
            "LD1N" => Ok(LD1N),
            "LD2N" => Ok(LD2N),
            "LD3N" => Ok(LD3N),
            "LD4N" => Ok(LD4N),
            "LD5N" => Ok(LD5N),
            "LD6N" => Ok(LD6N),
            "LDXN" => Ok(LDXN),
            "STA" => Ok(STA),
            "ST1" => Ok(ST1),
            "ST2" => Ok(ST2),
            "ST3" => Ok(ST3),
            "ST4" => Ok(ST4),
            "ST5" => Ok(ST5),
            "ST6" => Ok(ST6),
            "STX" => Ok(STX),
            "STJ" => Ok(STJ),
            "STZ" => Ok(STZ),
            "JBUS" => Ok(JBUS),
            "IOC" => Ok(IOC),
            "IN" => Ok(IN),
            "OUT" => Ok(OUT),
            "JRED" => Ok(JRED),
            "JMP" => Ok(JMP),
            "JSJ" => Ok(JSJ),
            "JOV" => Ok(JOV),
            "JNOV" => Ok(JNOV),
            "JL" => Ok(JL),
            "JE" => Ok(JE),
            "JG" => Ok(JG),
            "JGE" => Ok(JGE),
            "JNE" => Ok(JNE),
            "JLE" => Ok(JLE),
            "JAN" => Ok(JAN),
            "JAZ" => Ok(JAZ),
            "JAP" => Ok(JAP),
            "JANN" => Ok(JANN),
            "JANZ" => Ok(JANZ),
            "JANP" => Ok(JANP),
            "J1N" => Ok(J1N),
            "J1Z" => Ok(J1Z),
            "J1P" => Ok(J1P),
            "J1NN" => Ok(J1NN),
            "J1NZ" => Ok(J1NZ),
            "J1NP" => Ok(J1NP),
            "J2N" => Ok(J2N),
            "J2Z" => Ok(J2Z),
            "J2P" => Ok(J2P),
            "J2NN" => Ok(J2NN),
            "J2NZ" => Ok(J2NZ),
            "J2NP" => Ok(J2NP),
            "J3N" => Ok(J3N),
            "J3Z" => Ok(J3Z),
            "J3P" => Ok(J3P),
            "J3NN" => Ok(J3NN),
            "J3NZ" => Ok(J3NZ),
            "J3NP" => Ok(J3NP),
            "J4N" => Ok(J4N),
            "J4Z" => Ok(J4Z),
            "J4P" => Ok(J4P),
            "J4NN" => Ok(J4NN),
            "J4NZ" => Ok(J4NZ),
            "J4NP" => Ok(J4NP),
            "J5N" => Ok(J5N),
            "J5Z" => Ok(J5Z),
            "J5P" => Ok(J5P),
            "J5NN" => Ok(J5NN),
            "J5NZ" => Ok(J5NZ),
            "J5NP" => Ok(J5NP),
            "J6N" => Ok(J6N),
            "J6Z" => Ok(J6Z),
            "J6P" => Ok(J6P),
            "J6NN" => Ok(J6NN),
            "J6NZ" => Ok(J6NZ),
            "J6NP" => Ok(J6NP),
            "JXN" => Ok(JXN),
            "JXZ" => Ok(JXZ),
            "JXP" => Ok(JXP),
            "JXNN" => Ok(JXNN),
            "JXNZ" => Ok(JXNZ),
            "JXNP" => Ok(JXNP),
            "INCA" => Ok(INCA),
            "DECA" => Ok(DECA),
            "ENTA" => Ok(ENTA),
            "ENNA" => Ok(ENNA),
            "INC1" => Ok(INC1),
            "DEC1" => Ok(DEC1),
            "ENT1" => Ok(ENT1),
            "ENN1" => Ok(ENN1),
            "INC2" => Ok(INC2),
            "DEC2" => Ok(DEC2),
            "ENT2" => Ok(ENT2),
            "ENN2" => Ok(ENN2),
            "INC3" => Ok(INC3),
            "DEC3" => Ok(DEC3),
            "ENT3" => Ok(ENT3),
            "ENN3" => Ok(ENN3),
            "INC4" => Ok(INC4),
            "DEC4" => Ok(DEC4),
            "ENT4" => Ok(ENT4),
            "ENN4" => Ok(ENN4),
            "INC5" => Ok(INC5),
            "DEC5" => Ok(DEC5),
            "ENT5" => Ok(ENT5),
            "ENN5" => Ok(ENN5),
            "INC6" => Ok(INC6),
            "DEC6" => Ok(DEC6),
            "ENT6" => Ok(ENT6),
            "ENN6" => Ok(ENN6),
            "INCX" => Ok(INCX),
            "DECX" => Ok(DECX),
            "ENTX" => Ok(ENTX),
            "ENNX" => Ok(ENNX),
            "CMPA" => Ok(CMPA),
            "FCMP" => Ok(FCMP),
            "CMP1" => Ok(CMP1),
            "CMP2" => Ok(CMP2),
            "CMP3" => Ok(CMP3),
            "CMP4" => Ok(CMP4),
            "CMP5" => Ok(CMP5),
            "CMP6" => Ok(CMP6),
            "CMPX" => Ok(CMPX),
            _ => Err(format!("{} is not Instruction", s)),
        }
    }
}

pub fn instruction_data(inst: &Instruction) -> (i64, i64, i64, i64) {
    use Instruction::*;

    // address, index, modification, opecode,
    match inst {
        &NOP => (0, 0, 5, 0),
        &ADD => (0, 0, 5, 1),
        &SUB => (0, 0, 5, 2),
        &MUL => (0, 0, 5, 3),
        &DIV => (0, 0, 5, 4),
        &NUM => (0, 0, 5, 5),
        &CHAR => (0, 0, 1, 5),
        &HLT => (0, 0, 2, 5),
        &SLA => (0, 0, 0, 6),
        &SRA => (0, 0, 1, 6),
        &SLAX => (0, 0, 2, 6),
        &SRAX => (0, 0, 3, 6),
        &SLC => (0, 0, 4, 6),
        &SRC => (0, 0, 5, 6),
        &MOVE => (0, 0, 1, 7),
        &LDA => (0, 0, 5, 8),
        &LD1 => (0, 0, 5, 9),
        &LD2 => (0, 0, 5, 10),
        &LD3 => (0, 0, 5, 11),
        &LD4 => (0, 0, 5, 12),
        &LD5 => (0, 0, 5, 13),
        &LD6 => (0, 0, 5, 14),
        &LDX => (0, 0, 5, 15),
        &LDAN => (0, 0, 5, 16),
        &LD1N => (0, 0, 5, 17),
        &LD2N => (0, 0, 5, 18),
        &LD3N => (0, 0, 5, 19),
        &LD4N => (0, 0, 5, 20),
        &LD5N => (0, 0, 5, 21),
        &LD6N => (0, 0, 5, 22),
        &LDXN => (0, 0, 5, 23),
        &STA => (0, 0, 5, 24),
        &ST1 => (0, 0, 5, 25),
        &ST2 => (0, 0, 5, 26),
        &ST3 => (0, 0, 5, 27),
        &ST4 => (0, 0, 5, 28),
        &ST5 => (0, 0, 5, 29),
        &ST6 => (0, 0, 5, 30),
        &STX => (0, 0, 5, 31),
        &STJ => (0, 0, 2, 32),
        &STZ => (0, 0, 5, 33),
        &JBUS => (0, 0, 0, 34),
        &IOC => (0, 0, 0, 35),
        &IN => (0, 0, 0, 36),
        &OUT => (0, 0, 0, 37),
        &JRED => (0, 0, 0, 38),
        &JMP => (0, 0, 0, 39),
        &JSJ => (0, 0, 1, 39),
        &JOV => (0, 0, 2, 39),
        &JNOV => (0, 0, 3, 39),
        &JL => (0, 0, 4, 39),
        &JE => (0, 0, 5, 39),
        &JG => (0, 0, 6, 39),
        &JGE => (0, 0, 7, 39),
        &JNE => (0, 0, 8, 39),
        &JLE => (0, 0, 9, 39),
        &JAN => (0, 0, 0, 40),
        &JAZ => (0, 0, 1, 40),
        &JAP => (0, 0, 2, 40),
        &JANN => (0, 0, 3, 40),
        &JANZ => (0, 0, 4, 40),
        &JANP => (0, 0, 5, 40),
        &J1N => (0, 0, 0, 41),
        &J1Z => (0, 0, 1, 41),
        &J1P => (0, 0, 2, 41),
        &J1NN => (0, 0, 3, 41),
        &J1NZ => (0, 0, 4, 41),
        &J1NP => (0, 0, 5, 41),
        &J2N => (0, 0, 0, 42),
        &J2Z => (0, 0, 1, 42),
        &J2P => (0, 0, 2, 42),
        &J2NN => (0, 0, 3, 42),
        &J2NZ => (0, 0, 4, 42),
        &J2NP => (0, 0, 5, 42),
        &J3N => (0, 0, 0, 43),
        &J3Z => (0, 0, 1, 43),
        &J3P => (0, 0, 2, 43),
        &J3NN => (0, 0, 3, 43),
        &J3NZ => (0, 0, 4, 43),
        &J3NP => (0, 0, 5, 43),
        &J4N => (0, 0, 0, 44),
        &J4Z => (0, 0, 1, 44),
        &J4P => (0, 0, 2, 44),
        &J4NN => (0, 0, 3, 44),
        &J4NZ => (0, 0, 4, 44),
        &J4NP => (0, 0, 5, 44),
        &J5N => (0, 0, 0, 45),
        &J5Z => (0, 0, 1, 45),
        &J5P => (0, 0, 2, 45),
        &J5NN => (0, 0, 3, 45),
        &J5NZ => (0, 0, 4, 45),
        &J5NP => (0, 0, 5, 45),
        &J6N => (0, 0, 0, 46),
        &J6Z => (0, 0, 1, 46),
        &J6P => (0, 0, 2, 46),
        &J6NN => (0, 0, 3, 46),
        &J6NZ => (0, 0, 4, 46),
        &J6NP => (0, 0, 5, 46),
        &JXN => (0, 0, 0, 47),
        &JXZ => (0, 0, 1, 47),
        &JXP => (0, 0, 2, 47),
        &JXNN => (0, 0, 3, 47),
        &JXNZ => (0, 0, 4, 47),
        &JXNP => (0, 0, 5, 47),
        &INCA => (0, 0, 0, 48),
        &DECA => (0, 0, 1, 48),
        &ENTA => (0, 0, 2, 48),
        &ENNA => (0, 0, 3, 48),
        &INC1 => (0, 0, 0, 49),
        &DEC1 => (0, 0, 1, 49),
        &ENT1 => (0, 0, 2, 49),
        &ENN1 => (0, 0, 3, 49),
        &INC2 => (0, 0, 0, 50),
        &DEC2 => (0, 0, 1, 50),
        &ENT2 => (0, 0, 2, 50),
        &ENN2 => (0, 0, 3, 50),
        &INC3 => (0, 0, 0, 51),
        &DEC3 => (0, 0, 1, 51),
        &ENT3 => (0, 0, 2, 51),
        &ENN3 => (0, 0, 3, 51),
        &INC4 => (0, 0, 0, 52),
        &DEC4 => (0, 0, 1, 52),
        &ENT4 => (0, 0, 2, 52),
        &ENN4 => (0, 0, 3, 52),
        &INC5 => (0, 0, 0, 53),
        &DEC5 => (0, 0, 1, 53),
        &ENT5 => (0, 0, 2, 53),
        &ENN5 => (0, 0, 3, 53),
        &INC6 => (0, 0, 0, 54),
        &DEC6 => (0, 0, 1, 54),
        &ENT6 => (0, 0, 2, 54),
        &ENN6 => (0, 0, 3, 54),
        &INCX => (0, 0, 0, 55),
        &DECX => (0, 0, 1, 55),
        &ENTX => (0, 0, 2, 55),
        &ENNX => (0, 0, 3, 55),
        &CMPA => (0, 0, 5, 56),
        &FCMP => (0, 0, 6, 56),
        &CMP1 => (0, 0, 5, 57),
        &CMP2 => (0, 0, 5, 58),
        &CMP3 => (0, 0, 5, 58),
        &CMP4 => (0, 0, 5, 60),
        &CMP5 => (0, 0, 5, 61),
        &CMP6 => (0, 0, 5, 62),
        &CMPX => (0, 0, 5, 63),
    }
}
